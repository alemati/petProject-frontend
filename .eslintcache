[{"/Users/AM/pet_project/src/index.js":"1","/Users/AM/pet_project/src/App.js":"2","/Users/AM/pet_project/src/components/LoginView.js":"3","/Users/AM/pet_project/src/components/UserCreationView.js":"4","/Users/AM/pet_project/src/Store.js":"5","/Users/AM/pet_project/src/reducers/usersReducer.js":"6","/Users/AM/pet_project/src/services/userService.js":"7","/Users/AM/pet_project/src/reducers/loginReducer.js":"8","/Users/AM/pet_project/src/services/loginService.js":"9","/Users/AM/pet_project/src/components/HomeView.js":"10","/Users/AM/pet_project/src/components/Togglable.js":"11","/Users/AM/pet_project/src/components/UsersList.js":"12","/Users/AM/pet_project/src/components/PostPage.js":"13","/Users/AM/pet_project/src/components/PostForm.js":"14","/Users/AM/pet_project/src/reducers/postsReducer.js":"15","/Users/AM/pet_project/src/services/postService.js":"16","/Users/AM/pet_project/src/components/CommentForm.js":"17","/Users/AM/pet_project/src/reducers/commentsReducer.js":"18","/Users/AM/pet_project/src/services/commentService.js":"19","/Users/AM/pet_project/src/components/CommentsList.js":"20","/Users/AM/pet_project/src/components/SideBarNavigation.js":"21","/Users/AM/pet_project/src/components/TopBar.js":"22","/Users/AM/pet_project/src/components/PersonalPage.js":"23","/Users/AM/pet_project/src/components/UserPage.js":"24","/Users/AM/pet_project/src/components/SkillForm.js":"25","/Users/AM/pet_project/src/reducers/skillsReducer.js":"26","/Users/AM/pet_project/src/services/skillService.js":"27","/Users/AM/pet_project/src/reducers/notificationReducer.js":"28","/Users/AM/pet_project/src/components/Notification.js":"29"},{"size":387,"mtime":1611767695000,"results":"30","hashOfConfig":"31"},{"size":1928,"mtime":1612201287000,"results":"32","hashOfConfig":"31"},{"size":1746,"mtime":1612199010000,"results":"33","hashOfConfig":"31"},{"size":2691,"mtime":1612188711000,"results":"34","hashOfConfig":"31"},{"size":817,"mtime":1612189779000,"results":"35","hashOfConfig":"31"},{"size":1556,"mtime":1612188740000,"results":"36","hashOfConfig":"31"},{"size":746,"mtime":1612120401000,"results":"37","hashOfConfig":"31"},{"size":2381,"mtime":1612188541000,"results":"38","hashOfConfig":"31"},{"size":263,"mtime":1611677421000,"results":"39","hashOfConfig":"31"},{"size":996,"mtime":1612120195000,"results":"40","hashOfConfig":"31"},{"size":629,"mtime":1611952244000,"results":"41","hashOfConfig":"31"},{"size":9341,"mtime":1612201208000,"results":"42","hashOfConfig":"31"},{"size":4064,"mtime":1612172180000,"results":"43","hashOfConfig":"31"},{"size":1099,"mtime":1612198978000,"results":"44","hashOfConfig":"31"},{"size":1613,"mtime":1612199719000,"results":"45","hashOfConfig":"31"},{"size":1028,"mtime":1612120391000,"results":"46","hashOfConfig":"31"},{"size":1136,"mtime":1612171926000,"results":"47","hashOfConfig":"31"},{"size":1685,"mtime":1612199718000,"results":"48","hashOfConfig":"31"},{"size":1059,"mtime":1611933832000,"results":"49","hashOfConfig":"31"},{"size":1221,"mtime":1612023906000,"results":"50","hashOfConfig":"31"},{"size":356,"mtime":1612170400000,"results":"51","hashOfConfig":"31"},{"size":1107,"mtime":1612198916000,"results":"52","hashOfConfig":"31"},{"size":1284,"mtime":1612172098000,"results":"53","hashOfConfig":"31"},{"size":2548,"mtime":1612120324000,"results":"54","hashOfConfig":"31"},{"size":2079,"mtime":1612172261000,"results":"55","hashOfConfig":"31"},{"size":2028,"mtime":1612200028000,"results":"56","hashOfConfig":"31"},{"size":969,"mtime":1612110375000,"results":"57","hashOfConfig":"31"},{"size":669,"mtime":1612198842000,"results":"58","hashOfConfig":"31"},{"size":1502,"mtime":1612167835000,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"113wyix",{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"62"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"62"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"62"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"62"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"62"},"/Users/AM/pet_project/src/index.js",[],["137","138"],"/Users/AM/pet_project/src/App.js",["139","140"],"/Users/AM/pet_project/src/components/LoginView.js",["141"],"import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { login } from '../reducers/loginReducer'\nimport Notification from './Notification'\nimport { closeNotification } from '../reducers/notificationReducer'\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\n\nimport {\n    Link, useHistory\n} from \"react-router-dom\"\n\n\nconst LoginView = () => {\n    const [username, setUsername] = useState(\"\")\n    const [password, setpassword] = useState(\"\")\n    const dispatch = useDispatch()\n    const history = useHistory()\n    dispatch(closeNotification())\n\n    const handleLogin = (event) => {\n        event.preventDefault()\n        console.log('logining is with:', username, password)\n        dispatch(login(username, password))\n    }\n\n    return (\n        <div>\n            <Modal.Dialog>\n                <Modal.Header>\n                    <Modal.Title>Login</Modal.Title>\n                </Modal.Header>\n\n                <form onSubmit={handleLogin}>\n                    <Modal.Body>\n\n                        Username <input type='text' value={username} placeholder={'3-10 symbols'} onChange={event => setUsername(event.target.value)} />\n                        <br />\n                        Password <input type='password' value={password} placeholder={'3-10 symbols'} onChange={event => setpassword(event.target.value)} />\n\n                    </Modal.Body>\n\n                    <Modal.Footer>\n                        <Notification />\n                        <Button type='submit'>Login</Button>     <Link to=\"/createUser\">create new user</Link>\n                    </Modal.Footer>\n                </form>\n            </Modal.Dialog>\n        </div>\n    )\n}\n\nexport default LoginView;\n","/Users/AM/pet_project/src/components/UserCreationView.js",[],"/Users/AM/pet_project/src/Store.js",[],"/Users/AM/pet_project/src/reducers/usersReducer.js",[],"/Users/AM/pet_project/src/services/userService.js",["142","143"],"import axios from 'axios'\n// const baseUrl = '/users'\nconst baseUrl = 'http://localhost:3005/api/users'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n  \n}\nconst removeToken = () => {\n  token = null\n  \n}\nconst getById = async (id) => {\n  const response = await axios.get(`${baseUrl}/${id}`)\n  return response.data\n}\n\nconst getAll = async () => {\n  const response = await axios.get(`${baseUrl}`)\n  return response.data\n}\n\nconst createNew = async (newObject) => {\n  const response = await axios.post(baseUrl, newObject)\n  return response.data\n}\n\nconst update = async (id, newObject) => {\n  const res = await axios.put(`${baseUrl}/${id}`, newObject)\n  return res.data\n}\n\nexport default { getAll, getById, createNew, setToken, removeToken, update }","/Users/AM/pet_project/src/reducers/loginReducer.js",[],"/Users/AM/pet_project/src/services/loginService.js",["144"],"import axios from 'axios'\nconst baseUrl = 'http://localhost:3005/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  console.log('response was:', response)\n  return response.data\n}\n\nexport default { login }","/Users/AM/pet_project/src/components/HomeView.js",["145","146"],"import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { logout } from '../reducers/loginReducer'\nimport PostPage from './PostPage'\nimport PostForm from './PostForm'\nimport TopBar from './TopBar'\n\nimport SideBarNavigation from './SideBarNavigation'\n\nconst HomeView = () => {\n    const login = useSelector(state => state.login)\n    if (!login) {\n        return null\n    }\n\n    return (\n\n\n        <div >\n            <div className=\"container\">\n                <TopBar />\n                <hr />\n                <div className=\"row\">\n                    <div className=\"col-sm-2\">\n                        <SideBarNavigation />\n                    </div>\n                    <div className=\"col-sm-7\">\n                        <PostPage />\n                    </div>\n                    <div className=\"col-sm-3\">\n                        <PostForm />\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default HomeView;","/Users/AM/pet_project/src/components/Togglable.js",[],["147","148"],"/Users/AM/pet_project/src/components/UsersList.js",["149","150","151","152","153"],"import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { updateUser } from '../reducers/usersReducer'\n\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport TopBar from './TopBar'\n\nimport SideBarNavigation from './SideBarNavigation'\n\n\n\nimport {\n    Link,\n} from \"react-router-dom\"\n\nconst UsersList = () => {\n    const users = useSelector(state => state.users)\n    const login = useSelector(state => state.login)\n\n    const currentUser = users.find(u => u.username === login.username)\n\n    const allOtherUsers = users.filter(u => u.username !== login.username)\n\n    const myRequests = allOtherUsers.filter(u => {\n        if (u.received.includes(currentUser.id)) {\n            return u\n        }\n    })\n    const myRecieved = allOtherUsers.filter(u => {\n        if (u.requests.includes(currentUser.id)) {\n            return u\n        }\n    })\n\n    const myFriends = allOtherUsers.filter(u => {\n        if (u.friends.includes(currentUser.id)) {\n            return u\n        }\n    })\n\n\n    const section = {\n        paddingTop: 5,\n        paddingLeft: 2,\n        paddingRight: 2,\n        paddingBottom: 5,\n        border: 'solid',\n        borderWidth: 2,\n        marginBottom: 5\n    }\n\n\n    const neutralUser = allOtherUsers.filter(u => !myRequests.includes(u) && !myRecieved.includes(u) && !myFriends.includes(u))\n\n\n    return (\n        <div className=\"container\">\n            <TopBar />\n            <hr />\n            <div className=\"row\">\n                <div className=\"col-sm-2\">\n                    <SideBarNavigation />\n                    {/* <UsersList /> */}\n                </div>\n                <div className=\"col-sm-7\">\n                    <h4>Contacts</h4>\n                    <Accordion defaultActiveKey=\"0\">\n\n                        <Card>\n                            <Card.Header>\n                                <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"1\" >\n                                    Friends\n                                </Accordion.Toggle>\n                            </Card.Header>\n                            <Accordion.Collapse eventKey=\"1\">\n                                <Card.Body><Friends login={login} users={users} allOtherUsers={allOtherUsers} myRecieved={myRecieved} /></Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n\n                        <Card>\n                            <Card.Header>\n                                <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"3\" >\n                                    My requests\n                    </Accordion.Toggle>\n                            </Card.Header>\n                            <Accordion.Collapse eventKey=\"3\">\n                                <Card.Body>{myRequests.map(user => <UserLine key={user.id} user={user} users={users} login={login} status={'request'} />)}</Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n\n                    </Accordion>\n                </div>\n                <div className=\"col-sm-3\">\n                    <h4>Other users</h4>\n                    <div className=\"user-list\">\n                        {neutralUser.map(user => <UserLine key={user.id} user={user} users={users} login={login} status={'stranger'} />)}\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nconst Friends = ({ login, users, allOtherUsers, myRecieved }) => {\n    const currentUser = users.find(u => u.username === login.username)\n    if (!currentUser) {\n        return null\n    }\n    const friends = allOtherUsers.filter(u => {\n        if (u.friends.includes(currentUser.id)) {\n            return u\n        }\n    })\n    if (myRecieved.length === 0) {\n        return (\n            <div>\n                <h5>My friends</h5>\n                <hr />\n                {friends.map(user => <UserLine key={user.id} user={user} users={users} login={login} status={'friend'} />)}\n            </div>\n        )\n\n    }\n    return (\n        <div>\n            <h5>Friend request</h5>\n            <hr />\n            {myRecieved.map(user => <UserLine key={user.id} user={user} users={users} login={login} status={'received'} />)}\n            <h5>My friends</h5>\n            <hr />\n            {friends.map(user => <UserLine key={user.id} user={user} users={users} login={login} status={'friend'} />)}\n        </div>\n    )\n\n}\n\nconst UserLine = ({ user, users, login, status }) => {\n    const dispatch = useDispatch()\n\n    const handleSendRequest = (id) => {\n        const currentUser = users.find(u => u.username === login.username)\n        const currentUserUpdated = { ...currentUser, requests: currentUser.requests.concat(id) }\n\n        const requestedFriend = users.find(u => u.username === user.username)\n        const requestedFriendUpdated = { ...requestedFriend, received: requestedFriend.received.concat(currentUser.id) }\n\n        dispatch(updateUser(currentUserUpdated))\n        dispatch(updateUser(requestedFriendUpdated))\n    }\n\n    const handleRemoveRequest = (id) => {\n        console.log('I changed my mind')\n        const currentUser = users.find(u => u.username === login.username)\n        const updatedRequests = currentUser.requests.filter(idInList => idInList !== id)\n        const updatedCurrentUser = { ...currentUser, requests: updatedRequests }\n\n        const secondUser = users.find(u => u.username === user.username)\n        const updatedReceived = secondUser.received.filter(idInList => idInList !== currentUser.id)\n        const updatedsecondUser = { ...secondUser, received: updatedReceived }\n\n        dispatch(updateUser(updatedCurrentUser))\n        dispatch(updateUser(updatedsecondUser))\n    }\n    const handleAccept = (id) => {\n        console.log('I want to be a friend with you!!!')\n        const currentUser = users.find(u => u.username === login.username)\n        const updatedReceived = currentUser.received.filter(idInList => idInList !== id)\n        const updatedFriends = currentUser.friends.concat(id)\n        const updatedCurrentUser = {\n            ...currentUser,\n            received: updatedReceived,\n            friends: updatedFriends\n        }\n\n        const secondUser = users.find(u => u.username === user.username)\n        const updatedRequests = secondUser.requests.filter(idInList => idInList !== currentUser.id)\n        const updatedSecondUser = {\n            ...secondUser,\n            requests: updatedRequests,\n            friends: secondUser.friends.concat(currentUser.id)\n        }\n\n        dispatch(updateUser(updatedCurrentUser))\n        dispatch(updateUser(updatedSecondUser))\n\n    }\n    const handleDecline = (id) => {\n        const currentUser = users.find(u => u.username === login.username)\n        const updatedReceived = currentUser.received.filter(idInList => idInList !== id)\n        const updatedCurrentUser = { ...currentUser, received: updatedReceived }\n\n        const secondUser = users.find(u => u.username === user.username)\n        const updatedRequests = secondUser.requests.filter(idInList => idInList !== currentUser.id)\n        const updatedSecondUser = { ...secondUser, requests: updatedRequests }\n\n        dispatch(updateUser(updatedCurrentUser))\n        dispatch(updateUser(updatedSecondUser))\n    }\n    const removeFriend = (id) => {\n        const currentUser = users.find(u => u.username === login.username)\n        const updatedRFriends = currentUser.friends.filter(idInList => idInList !== id)\n        const updatedCurrentUser = { ...currentUser, friends: updatedRFriends }\n\n        const secondUser = users.find(u => u.username === user.username)\n        const secondUpdatedFriends = secondUser.friends.filter(idInList => idInList !== currentUser.id)\n        const updatedSecondUser = { ...secondUser, friends: secondUpdatedFriends }\n\n        dispatch(updateUser(updatedCurrentUser))\n        dispatch(updateUser(updatedSecondUser))\n    }\n\n    if (status === 'request') {\n        return (\n            <div>\n                <Link to={`/user/${user.url}`}>{user.name}</Link>   <Button className=\"rightButton\" onClick={() => handleRemoveRequest(user.id)}>Remove request</Button>\n                <hr />\n            </div>\n        )\n\n    } else if (status === 'received') {\n        return (\n            <div>\n                <Link to={`/user/${user.url}`}>{user.name}</Link> <br />\n                <Button onClick={() => handleAccept(user.id)}>Accept</Button>  <Button onClick={() => handleDecline(user.id)}>Decline</Button>\n                <hr />\n            </div>\n        )\n\n    } else if (status === 'friend') {\n        return (\n            <div>\n                <Link to={`/user/${user.url}`}>{user.name}</Link> <Button className=\"rightButton\" onClick={() => removeFriend(user.id)}>Remove friend</Button>\n                <hr />\n            </div>\n        )\n\n    }\n    return (\n        <div>\n            <div className=\"col1\">\n                <Link to={`/user/${user.url}`} className=\"hiddenOverFlow\" >{user.name}</Link>\n            </div>\n            <div className=\"col2\">\n                <Button className=\"rightButton\" onClick={() => handleSendRequest(user.id)}>Make a friend</Button>\n                <hr />\n            </div>\n        </div>\n    )\n\n}\n\nexport default UsersList;\n\n\n\n","/Users/AM/pet_project/src/components/PostPage.js",["154","155"],"import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { removePost } from '../reducers/postsReducer'\nimport { updateUser } from '../reducers/usersReducer'\n\nimport CommentForm from \"./CommentForm\"\nimport CommentsList from \"./CommentsList\"\n\nimport Button from 'react-bootstrap/Button'\n\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\n// import Button from 'react-bootstrap/Button'\n\nimport {\n    Link,\n} from \"react-router-dom\"\n\n\nconst PostPage = () => {\n    const login = useSelector(state => state.login)\n    const allPosts = useSelector(state => state.posts)\n    const users = useSelector(state => state.users)\n    const currentUser = users.find(u => u.username === login.username)\n    if (!currentUser) {\n        return null\n    }\n\n    const friends = users.filter(u => {\n        if (u.friends.includes(currentUser.id)) {\n            return u\n        }\n    })\n    const friendsId = friends.map(f => f.id)\n    const postIds = friendsId.concat(currentUser.id)\n    const postsByFriends = allPosts.filter(p => {\n        if (postIds.includes(p.user)) {\n            return p\n        }\n    })\n\n    return (\n        <div >\n            <h4>Posts</h4>\n            <Accordion defaultActiveKey=\"0\">\n                {postsByFriends.map(post => <PostLine key={post.id} post={post} currentUser={currentUser} />)}\n            </Accordion>\n        </div>\n    )\n}\n\nconst PostLine = ({ post, currentUser }) => {\n    const dispatch = useDispatch()\n    const users = useSelector(state => state.users)\n    const handleDeletePost = () => {\n\n        const postsWithoutPostId = currentUser.posts.filter(idd => idd !== post.id)\n        const userUpdated = { ...currentUser, posts: postsWithoutPostId }\n\n\n        dispatch(removePost(post.id))\n        dispatch(updateUser(userUpdated))\n    }\n    if (post.user === currentUser.id) {\n        return (\n            <div>\n                <Card >\n                    <Card.Header>\n                        <Accordion.Toggle as={Card.Body} variant=\"link\" eventKey={post.id} >\n                            {post.content} <Button className=\"deleteButton\" onClick={() => handleDeletePost()}>delete</Button>\n                            \n                        </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey={post.id}>\n                        <Card.Body>\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <CommentForm postId={post.id} user={currentUser} />\n                                </div>\n                                <div className=\"col\">\n                                    <CommentsList postId={post.id} />\n                                </div>\n\n                            </div>\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n            </div>\n        )\n    }\n    const postCreator = users.find(u => u.id === post.user)\n    return (\n        <div>\n            <Card>\n\n                <Card.Header>\n\n                    <Accordion.Toggle as={Card.Body} variant=\"link\" eventKey={post.id}>\n                        {post.content} <p className=\"by\">by<Link className=\"by\" to={`/user/${postCreator.url}`}>&nbsp;{ postCreator.name}</Link></p> \n                        \n                    </Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey={post.id}>\n                    <Card.Body>\n\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <CommentForm postId={post.id} user={currentUser} />\n                            </div>\n                            <div className=\"col\">\n                                <CommentsList postId={post.id} />\n                            </div>\n\n                        </div>\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </div>\n    )\n}\n\nexport default PostPage;","/Users/AM/pet_project/src/components/PostForm.js",["156"],"/Users/AM/pet_project/src/reducers/postsReducer.js",["157","158"],"import postService from '../services/postService'\nimport Notification from '../components/Notification'\nimport { setNotification, closeNotification } from '../reducers/notificationReducer'\n\n\nconst reducer = (state = [], action) => {\n    switch (action.type) {\n        case ('CREATE_NEW_POST'):\n            return state.concat(action.data)\n        case ('INIT_POSTS'):\n            return action.data\n        case ('REMOVE_POST'):\n            const newState = state.filter(p => p.id !== action.data)\n            return newState\n        default:\n    }\n    return state\n}\n\nexport const initializePosts = () => {\n    return async dispatch => {\n        const postsFromServer = await postService.getAll()\n        dispatch({\n            type: 'INIT_POSTS',\n            data: postsFromServer,\n        })\n    }\n}\n\nexport const createNewPost = obj => {\n    return async dispatch => {\n        try {\n            const createdPOST = await postService.createNew(obj)\n            dispatch({\n                type: 'CREATE_NEW_POST',\n                data: createdPOST,\n            })\n        } catch (e) {\n            console.log('error caught in postReducer', e)\n            dispatch(setNotification('error', 'Post should be at least 3 charachters long!'))\n            setTimeout(() => {\n                dispatch(closeNotification())\n            }, 3000)\n        }\n    }\n}\n\nexport const removePost = (postId) => {\n    return async dispatch => {\n        const res = await postService.remove(postId)\n        dispatch({\n            type: 'REMOVE_POST',\n            data: postId\n        })\n    }\n}\n\nexport default reducer","/Users/AM/pet_project/src/services/postService.js",["159"],"import axios from 'axios'\n// const baseUrl = '/users'\nconst baseUrl = 'http://localhost:3005/api/posts'\n\nlet token = null\n\nconst setToken = newToken => {\n    token = `bearer ${newToken}`\n\n}\nconst removeToken = () => {\n    token = null\n\n}\nconst getById = async (id) => {\n    const response = await axios.get(`${baseUrl}/${id}`)\n    return response.data\n}\n\nconst getAll = async () => {\n    const response = await axios.get(`${baseUrl}`)\n    return response.data\n}\n\nconst remove = async (id) => {\n    // console.log('remove is active and id in it is:', id)\n    const response = await axios.delete(`${baseUrl}/${id}`)\n    return response\n  }\n\nconst createNew = async (newObject) => {\n    const config = {\n        headers: { Authorization: token },\n    }\n    const response = await axios.post(baseUrl, newObject, config)\n    return response.data\n}\n\nconst update = async (id, newObject) => {\n    const res = await axios.put(`${baseUrl}/${id}`, newObject)\n    return res.data\n}\n\nexport default { getAll, getById, createNew, setToken, removeToken, update, remove }","/Users/AM/pet_project/src/components/CommentForm.js",["160","161","162"],"import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { logout } from '../reducers/loginReducer'\nimport UsersList from './UsersList'\nimport { createNewComment } from '../reducers/commentsReducer'\nimport Button from 'react-bootstrap/Button'\n\nconst CommentForm = ({ postId, user }) => {\n    const dispatch = useDispatch()\n    const [value, setValue] = useState(\"\")\n\n    const handleCreateNewComment = () => {\n        const newComment = {\n            content: value,\n            postId: postId,\n            user: user.id \n        }\n        setValue('')    \n        dispatch(createNewComment(newComment))\n    }\n\n    return (\n        <div >\n            <h5>Comment</h5>\n            {/* <form onSubmit={() => handleCreateNewComment()}> */}\n                <textarea className=\"comment\" value={value} placeholder={'Write a comment'} onChange={event => setValue(event.target.value)}></textarea>\n                <br />\n                <Button onClick={() => handleCreateNewComment()} type='submit'>Comment</Button>\n            {/* </form> */}\n\n\n\n        </div>\n    )\n}\n\nexport default CommentForm;","/Users/AM/pet_project/src/reducers/commentsReducer.js",["163"],"\nimport commentService from '../services/commentService'\n\nconst reducer = (state = [], action) => {\n    switch (action.type) {\n        case ('CREATE_NEW_COMMENT'):\n            return state.concat(action.data)\n        case ('INIT_COMMENTS'):\n            return action.data\n        case ('REMOVE_COMMENT'):\n            const newState = state.filter(p => p.id !== action.data)\n            return newState\n        default:\n    }\n    return state\n}\n\nexport const initializeComments = () => {\n    return async dispatch => {\n        const commentsFromServer = await commentService.getAll()\n        dispatch({\n            type: 'INIT_COMMENTS',\n            data: commentsFromServer,\n        })\n    }\n}\n\nexport const createNewComment = obj => {\n    return async dispatch => {\n        const createdComment = await commentService.createNew(obj)\n        dispatch({\n            type: 'CREATE_NEW_COMMENT',\n            data: createdComment,\n        })\n    }\n}\n\nexport const removeComment = ( commentId ) => {\n    return async dispatch => {\n        const res = await commentService.remove(commentId)\n        dispatch({\n            type: 'REMOVE_COMMENT',\n            data: commentId\n        })\n    }\n}\n\nexport default reducer","/Users/AM/pet_project/src/services/commentService.js",["164"],"import axios from 'axios'\nconst baseUrl = 'http://localhost:3005/api/comments'\n\nlet token = null\n\nconst setToken = newToken => {\n    token = `bearer ${newToken}`\n\n}\nconst removeToken = () => {\n    token = null\n\n}\nconst getById = async (id) => {\n    const response = await axios.get(`${baseUrl}/${id}`)\n    return response.data\n}\n\nconst getAll = async () => {\n    const response = await axios.get(`${baseUrl}`)\n    return response.data\n}\n\nconst remove = async (id) => {\n    const response = await axios.delete(`${baseUrl}/${id}`)\n    return response\n}\n\nconst createNew = async (newObject) => {\n    console.log('token is:', token)\n    console.log('newObject (comment) is:', newObject)\n    const config = {\n        headers: { Authorization: token },\n    }\n    const response = await axios.post(baseUrl, newObject, config)\n    return response.data\n}\n\nconst update = async (id, newObject) => {\n    const res = await axios.put(`${baseUrl}/${id}`, newObject)\n    return res.data\n}\n\nexport default { getAll, getById, createNew, setToken, removeToken, update, remove }","/Users/AM/pet_project/src/components/CommentsList.js",["165","166","167","168","169","170","171","172"],"import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { logout } from '../reducers/loginReducer'\nimport UsersList from './UsersList'\nimport { createNewComment } from '../reducers/commentsReducer'\n\nimport {\n    Switch, Route, Link, useHistory,\n} from \"react-router-dom\"\n\n\nconst CommentList = ({ postId }) => {\n    const allComments = useSelector(state => state.comments)\n    const commentsToPost = allComments.filter(c => c.post === postId)\n    return (\n        <div>\n            <h5>Recent comments</h5>\n            <div className=\"comments-list\">\n                {commentsToPost.map(c => <CommentLine key={c.id} comment={c} />)}\n            </div>\n        </div>\n    )\n}\n\nconst CommentLine = ({ comment }) => {\n    const users = useSelector(state => state.users)\n    const creator = users.find(u => u.id === comment.user)\n    return (\n        <div>\n            {/* <span> {comment.content} <p className=\"by\">by {creator.name}</p></span> */}\n            <span> {comment.content} <p className=\"by\">by<Link className=\"by\" to={`/user/${creator.url}`}>&nbsp;{ creator.name}</Link></p> </span>\n            \n            <hr />\n        </div>\n    )\n\n}\n\nexport default CommentList;","/Users/AM/pet_project/src/components/SideBarNavigation.js",[],"/Users/AM/pet_project/src/components/TopBar.js",[],"/Users/AM/pet_project/src/components/PersonalPage.js",["173","174"],"import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport TopBar from './TopBar'\nimport SideBarNavigation from './SideBarNavigation'\nimport SkillForm from './SkillForm'\n\n\nconst PersonalPage = () => {\n    const login = useSelector(state => state.login)\n    const allPosts = useSelector(state => state.posts)\n    const users = useSelector(state => state.users)\n    const currentUser = users.find(u => u.username === login.username)\n    if (!currentUser) {\n        return null\n    }\n    const userPosts = allPosts.filter(u => u.user === currentUser.id)\n    return (\n\n        <div className=\"container\">\n            <TopBar />\n            <hr />\n            <div className=\"row\">\n                <div className=\"col-sm-2\">\n                    <SideBarNavigation />\n                </div>\n                <div className=\"col-sm-7\">\n                    <h4>Me</h4>\n                    <h5>My posts:</h5>\n                    <hr />\n                    {userPosts.map(p => <p key={p.id}>{p.content} <hr /></p>)}\n                </div>\n                <div className=\"col-sm-3\">\n                    <h4>My skills</h4>\n                    <SkillForm />\n                    \n                </div>\n\n            </div>\n        </div>\n\n\n\n\n\n\n\n    )\n}\n\nexport default PersonalPage;","/Users/AM/pet_project/src/components/UserPage.js",["175"],"import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport TopBar from './TopBar'\nimport SideBarNavigation from './SideBarNavigation'\nimport { updateSkill } from '../reducers/skillsReducer'\n\nimport {\n    useParams\n} from \"react-router-dom\"\n\nconst UserPage = () => {\n    const url = useParams().url\n    const allPosts = useSelector(state => state.posts)\n    const allSkills = useSelector(state => state.skills)\n    const users = useSelector(state => state.users)\n    const user = users.find(u => u.url === url)\n    const userSkills = allSkills.filter(s => s.user === user.id)\n    if (!user) {\n        return null\n    }\n    const userPosts = allPosts.filter(u => u.user === user.id)\n    const skillsToShow = userSkills.sort((e1, e2) => e2.likes.length - e1.likes.length)\n                        \n    return (\n        <div className=\"container\">\n            <TopBar />\n            <hr />\n            <div className=\"row\">\n                <div className=\"col-sm-2\">\n                    <SideBarNavigation />\n                </div>\n                <div className=\"col-sm-7\">\n                    <h4>{user.name}</h4>\n                    <h5>{user.name}'s posts:</h5>\n                    {userPosts.map(p => <p key={p.id}>{p.content}</p>)}\n                </div>\n                <div className=\"col-sm-3\">\n                    <h4>{user.name}'s skills</h4>\n                    <hr />\n                    {skillsToShow.map(skill => <SkillLine key={skill.id} skill={skill} />)}\n                </div>\n\n            </div>\n        </div>\n\n    )\n}\n\nconst SkillLine = ({ skill }) => {\n    const dispatch = useDispatch()\n    const login = useSelector(state => state.login)\n    const users = useSelector(state => state.users)\n    const currentUser = users.find(u => u.username === login.username)\n\n    const handleLike = () => {\n        // console.log('I want to like this skill', id)\n        const updatedLikeList = skill.likes.concat(currentUser.id)\n        const updatedSkill = { ...skill, likes: updatedLikeList }\n        dispatch(updateSkill(updatedSkill))\n    }\n\n    if (skill.likes.includes(currentUser.id)) {\n        return (\n            <div >\n                <p key={skill.id}>{skill.content}: {skill.likes.length} likes. You liked it!</p>\n                <hr />\n            </div>\n        )\n    }\n\n    return (\n        <div >\n            <p key={skill.id}>{skill.content}: {skill.likes.length} likes. <button onClick={() => handleLike()}>like!</button></p>\n            <hr />\n        </div>\n    )\n}\n\nexport default UserPage;","/Users/AM/pet_project/src/components/SkillForm.js",[],"/Users/AM/pet_project/src/reducers/skillsReducer.js",["176","177"],"import skillService from '../services/skillService'\nimport Notification from '../components/Notification'\nimport { setNotification, closeNotification } from '../reducers/notificationReducer'\n\nconst reducer = (state = [], action) => {\n    switch (action.type) {\n        case ('CREATE_NEW_SKILL'):\n            return state.concat(action.data)\n        case ('INIT_SKILLS'):\n            return action.data\n        case ('REMOVE_SKILL'):\n            const newState = state.filter(s => s.id !== action.data)\n            return newState\n        case 'UPDATE_SKILL': {\n            const id = action.data.id\n            return state.map(user => user.id !== id ? user : action.data)\n        }\n        default:\n    }\n    return state\n}\n\nexport const updateSkill = (skill) => {\n    return async dispatch => {\n        const updated = await skillService.update(skill.id, skill)\n        dispatch({\n            type: 'UPDATE_SKILL',\n            data: updated,\n        })\n    }\n}\n\nexport const initializeSkills = () => {\n    return async dispatch => {\n        const skillsFromServer = await skillService.getAll()\n        dispatch({\n            type: 'INIT_SKILLS',\n            data: skillsFromServer,\n        })\n    }\n}\n\nexport const createNewSkill = obj => {\n    return async dispatch => {\n        try {\n            const createdSkill = await skillService.createNew(obj)\n            dispatch({\n                type: 'CREATE_NEW_SKILL',\n                data: createdSkill,\n            })\n        } catch (e) {\n            console.log('error caught in postReducer', e)\n            dispatch(setNotification('error', 'Skill should be at least 1 and at most 20 charachters long!'))\n            setTimeout(() => {\n                dispatch(closeNotification())\n            }, 3000)\n        }\n\n    }\n}\n\nexport const removeSkill = (skillId) => {\n    return async dispatch => {\n        const res = await skillService.remove(skillId)\n        dispatch({\n            type: 'REMOVE_SKILL',\n            data: skillId\n        })\n    }\n}\n\nexport default reducer","/Users/AM/pet_project/src/services/skillService.js",["178"],"import axios from 'axios'\nconst baseUrl = 'http://localhost:3005/api/skills'\n\nlet token = null\n\nconst setToken = newToken => {\n    token = `bearer ${newToken}`\n\n}\nconst removeToken = () => {\n    token = null\n\n}\nconst getById = async (id) => {\n    const response = await axios.get(`${baseUrl}/${id}`)\n    return response.data\n}\n\nconst getAll = async () => {\n    const response = await axios.get(`${baseUrl}`)\n    return response.data\n}\n\nconst remove = async (id) => {\n    const response = await axios.delete(`${baseUrl}/${id}`)\n    return response\n  }\n\nconst createNew = async (newObject) => {\n    const config = {\n        headers: { Authorization: token },\n    }\n    const response = await axios.post(baseUrl, newObject, config)\n    return response.data\n}\n\nconst update = async (id, newObject) => {\n    const res = await axios.put(`${baseUrl}/${id}`, newObject)\n    return res.data\n}\n\nexport default { getAll, getById, createNew, setToken, removeToken, update, remove }","/Users/AM/pet_project/src/reducers/notificationReducer.js",[],"/Users/AM/pet_project/src/components/Notification.js",["179","180","181","182","183","184"],"import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport Alert from 'react-bootstrap/Alert'\nimport { closeNotification } from '../reducers/notificationReducer'\n\n\nimport {\n    Link, useHistory\n} from \"react-router-dom\"\n\nconst Notification = () => {\n    const notification = useSelector(state => state.notification)\n    const history = useHistory()\n    const dispatch = useDispatch()\n    if (notification === null) {\n        return null\n    }\n\n    const notType = notification.type === 'error' ? 'Error' : 'Success'\n\n    const solve = () => {\n        dispatch(closeNotification())\n        // history.push('/')\n    }\n\n    return (\n\n        // <div>\n            <Alert variant=\"danger\">\n                {/* <Alert.Heading>{notType}</Alert.Heading> */}\n                <p> {notification.content} </p>\n            </Alert>\n        // </div>\n\n\n        // <div>\n        //     <Modal.Dialog>\n        //         <Modal.Header closeButton>\n        //             <Modal.Title>{notType}</Modal.Title>\n        //         </Modal.Header>\n\n        //         <Modal.Body>\n        //             <p>{notification.content}</p>\n        //         </Modal.Body>\n\n        //         <Modal.Footer>\n        //             <Button onClick={() => solve()} variant=\"primary\">OK</Button>\n        //         </Modal.Footer>\n        //     </Modal.Dialog>\n        // </div>\n\n    )\n}\n\nexport default Notification",{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","severity":1,"message":"190","line":15,"column":10,"nodeType":"191","messageId":"192","endLine":15,"endColumn":25},{"ruleId":"189","severity":1,"message":"193","line":35,"column":9,"nodeType":"191","messageId":"192","endLine":35,"endColumn":14},{"ruleId":"189","severity":1,"message":"194","line":18,"column":11,"nodeType":"191","messageId":"192","endLine":18,"endColumn":18},{"ruleId":"189","severity":1,"message":"195","line":12,"column":3,"nodeType":"191","messageId":"192","endLine":12,"endColumn":8},{"ruleId":"196","severity":1,"message":"197","line":35,"column":1,"nodeType":"198","endLine":35,"endColumn":77},{"ruleId":"196","severity":1,"message":"197","line":10,"column":1,"nodeType":"198","endLine":10,"endColumn":25},{"ruleId":"189","severity":1,"message":"199","line":2,"column":23,"nodeType":"191","messageId":"192","endLine":2,"endColumn":34},{"ruleId":"189","severity":1,"message":"200","line":3,"column":10,"nodeType":"191","messageId":"192","endLine":3,"endColumn":16},{"ruleId":"185","replacedBy":"201"},{"ruleId":"187","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":26,"column":47,"nodeType":"205","messageId":"206","endLine":26,"endColumn":49},{"ruleId":"203","severity":1,"message":"204","line":31,"column":47,"nodeType":"205","messageId":"206","endLine":31,"endColumn":49},{"ruleId":"203","severity":1,"message":"204","line":37,"column":46,"nodeType":"205","messageId":"206","endLine":37,"endColumn":48},{"ruleId":"189","severity":1,"message":"207","line":44,"column":11,"nodeType":"191","messageId":"192","endLine":44,"endColumn":18},{"ruleId":"203","severity":1,"message":"204","line":112,"column":44,"nodeType":"205","messageId":"206","endLine":112,"endColumn":46},{"ruleId":"203","severity":1,"message":"204","line":29,"column":36,"nodeType":"205","messageId":"206","endLine":29,"endColumn":38},{"ruleId":"203","severity":1,"message":"204","line":36,"column":46,"nodeType":"205","messageId":"206","endLine":36,"endColumn":48},{"ruleId":"189","severity":1,"message":"208","line":5,"column":8,"nodeType":"191","messageId":"192","endLine":5,"endColumn":13},{"ruleId":"189","severity":1,"message":"209","line":2,"column":8,"nodeType":"191","messageId":"192","endLine":2,"endColumn":20},{"ruleId":"189","severity":1,"message":"210","line":50,"column":15,"nodeType":"191","messageId":"192","endLine":50,"endColumn":18},{"ruleId":"196","severity":1,"message":"197","line":44,"column":1,"nodeType":"198","endLine":44,"endColumn":85},{"ruleId":"189","severity":1,"message":"211","line":2,"column":10,"nodeType":"191","messageId":"192","endLine":2,"endColumn":21},{"ruleId":"189","severity":1,"message":"200","line":3,"column":10,"nodeType":"191","messageId":"192","endLine":3,"endColumn":16},{"ruleId":"189","severity":1,"message":"212","line":4,"column":8,"nodeType":"191","messageId":"192","endLine":4,"endColumn":17},{"ruleId":"189","severity":1,"message":"210","line":40,"column":15,"nodeType":"191","messageId":"192","endLine":40,"endColumn":18},{"ruleId":"196","severity":1,"message":"197","line":44,"column":1,"nodeType":"198","endLine":44,"endColumn":85},{"ruleId":"189","severity":1,"message":"213","line":1,"column":17,"nodeType":"191","messageId":"192","endLine":1,"endColumn":25},{"ruleId":"189","severity":1,"message":"199","line":2,"column":23,"nodeType":"191","messageId":"192","endLine":2,"endColumn":34},{"ruleId":"189","severity":1,"message":"200","line":3,"column":10,"nodeType":"191","messageId":"192","endLine":3,"endColumn":16},{"ruleId":"189","severity":1,"message":"212","line":4,"column":8,"nodeType":"191","messageId":"192","endLine":4,"endColumn":17},{"ruleId":"189","severity":1,"message":"214","line":5,"column":10,"nodeType":"191","messageId":"192","endLine":5,"endColumn":26},{"ruleId":"189","severity":1,"message":"215","line":8,"column":5,"nodeType":"191","messageId":"192","endLine":8,"endColumn":11},{"ruleId":"189","severity":1,"message":"216","line":8,"column":13,"nodeType":"191","messageId":"192","endLine":8,"endColumn":18},{"ruleId":"189","severity":1,"message":"217","line":8,"column":26,"nodeType":"191","messageId":"192","endLine":8,"endColumn":36},{"ruleId":"189","severity":1,"message":"213","line":1,"column":17,"nodeType":"191","messageId":"192","endLine":1,"endColumn":25},{"ruleId":"189","severity":1,"message":"199","line":2,"column":23,"nodeType":"191","messageId":"192","endLine":2,"endColumn":34},{"ruleId":"189","severity":1,"message":"213","line":1,"column":17,"nodeType":"191","messageId":"192","endLine":1,"endColumn":25},{"ruleId":"189","severity":1,"message":"209","line":2,"column":8,"nodeType":"191","messageId":"192","endLine":2,"endColumn":20},{"ruleId":"189","severity":1,"message":"210","line":64,"column":15,"nodeType":"191","messageId":"192","endLine":64,"endColumn":18},{"ruleId":"196","severity":1,"message":"197","line":42,"column":1,"nodeType":"198","endLine":42,"endColumn":85},{"ruleId":"189","severity":1,"message":"218","line":3,"column":8,"nodeType":"191","messageId":"192","endLine":3,"endColumn":13},{"ruleId":"189","severity":1,"message":"219","line":4,"column":8,"nodeType":"191","messageId":"192","endLine":4,"endColumn":14},{"ruleId":"189","severity":1,"message":"220","line":10,"column":5,"nodeType":"191","messageId":"192","endLine":10,"endColumn":9},{"ruleId":"189","severity":1,"message":"194","line":15,"column":11,"nodeType":"191","messageId":"192","endLine":15,"endColumn":18},{"ruleId":"189","severity":1,"message":"221","line":21,"column":11,"nodeType":"191","messageId":"192","endLine":21,"endColumn":18},{"ruleId":"189","severity":1,"message":"222","line":23,"column":11,"nodeType":"191","messageId":"192","endLine":23,"endColumn":16},"no-native-reassign",["223"],"no-negated-in-lhs",["224"],"no-unused-vars","'setNotification' is defined but never used.","Identifier","unusedVar","'users' is assigned a value but never used.","'history' is assigned a value but never used.","'token' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useDispatch' is defined but never used.","'logout' is defined but never used.",["223"],["224"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'section' is assigned a value but never used.","'Alert' is defined but never used.","'Notification' is defined but never used.","'res' is assigned a value but never used.","'useSelector' is defined but never used.","'UsersList' is defined but never used.","'useState' is defined but never used.","'createNewComment' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'useHistory' is defined but never used.","'Modal' is defined but never used.","'Button' is defined but never used.","'Link' is defined but never used.","'notType' is assigned a value but never used.","'solve' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]