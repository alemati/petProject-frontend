[{"/Users/AM/pet_project/src/index.js":"1","/Users/AM/pet_project/src/App.js":"2","/Users/AM/pet_project/src/components/LoginView.js":"3","/Users/AM/pet_project/src/components/UserCreationView.js":"4","/Users/AM/pet_project/src/Store.js":"5","/Users/AM/pet_project/src/reducers/usersReducer.js":"6","/Users/AM/pet_project/src/services/userService.js":"7","/Users/AM/pet_project/src/reducers/loginReducer.js":"8","/Users/AM/pet_project/src/services/loginService.js":"9","/Users/AM/pet_project/src/components/HomeView.js":"10","/Users/AM/pet_project/src/components/Togglable.js":"11","/Users/AM/pet_project/src/components/UsersList.js":"12","/Users/AM/pet_project/src/components/PostPage.js":"13","/Users/AM/pet_project/src/components/PostForm.js":"14","/Users/AM/pet_project/src/reducers/postsReducer.js":"15","/Users/AM/pet_project/src/services/postService.js":"16","/Users/AM/pet_project/src/components/CommentForm.js":"17","/Users/AM/pet_project/src/reducers/commentsReducer.js":"18","/Users/AM/pet_project/src/services/commentService.js":"19","/Users/AM/pet_project/src/components/CommentsList.js":"20","/Users/AM/pet_project/src/components/SideBarNavigation.js":"21","/Users/AM/pet_project/src/components/TopBar.js":"22","/Users/AM/pet_project/src/components/PersonalPage.js":"23","/Users/AM/pet_project/src/components/UserPage.js":"24","/Users/AM/pet_project/src/components/SkillForm.js":"25"},{"size":387,"mtime":1611767695000,"results":"26","hashOfConfig":"27"},{"size":1698,"mtime":1612020970000,"results":"28","hashOfConfig":"27"},{"size":1158,"mtime":1611952173000,"results":"29","hashOfConfig":"27"},{"size":1846,"mtime":1611943553000,"results":"30","hashOfConfig":"27"},{"size":633,"mtime":1611911622000,"results":"31","hashOfConfig":"27"},{"size":1187,"mtime":1611852348000,"results":"32","hashOfConfig":"27"},{"size":774,"mtime":1611842353000,"results":"33","hashOfConfig":"27"},{"size":2073,"mtime":1611928144000,"results":"34","hashOfConfig":"27"},{"size":263,"mtime":1611677421000,"results":"35","hashOfConfig":"27"},{"size":1398,"mtime":1611952155000,"results":"36","hashOfConfig":"27"},{"size":629,"mtime":1611952244000,"results":"37","hashOfConfig":"27"},{"size":10468,"mtime":1612024935000,"results":"38","hashOfConfig":"27"},{"size":4502,"mtime":1612023135000,"results":"39","hashOfConfig":"27"},{"size":1096,"mtime":1611952186000,"results":"40","hashOfConfig":"27"},{"size":1243,"mtime":1611858201000,"results":"41","hashOfConfig":"27"},{"size":1056,"mtime":1611933896000,"results":"42","hashOfConfig":"27"},{"size":1110,"mtime":1611952068000,"results":"43","hashOfConfig":"27"},{"size":1356,"mtime":1611934080000,"results":"44","hashOfConfig":"27"},{"size":1059,"mtime":1611933832000,"results":"45","hashOfConfig":"27"},{"size":1221,"mtime":1612023906000,"results":"46","hashOfConfig":"27"},{"size":419,"mtime":1612032148000,"results":"47","hashOfConfig":"27"},{"size":896,"mtime":1611952249000,"results":"48","hashOfConfig":"27"},{"size":1310,"mtime":1612032934000,"results":"49","hashOfConfig":"27"},{"size":1296,"mtime":1612021727000,"results":"50","hashOfConfig":"27"},{"size":1336,"mtime":1612033002000,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"113wyix",{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"54"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/AM/pet_project/src/index.js",[],["118","119"],"/Users/AM/pet_project/src/App.js",["120","121"],"/Users/AM/pet_project/src/components/LoginView.js",[],"/Users/AM/pet_project/src/components/UserCreationView.js",["122","123","124"],"import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { createNewUser } from '../reducers/usersReducer'\n\nimport {\n    Switch, Route, Link, useHistory\n  } from \"react-router-dom\"\n\n\nconst UserCreationPage = () => {\n    const [username, setUsername] = useState(\"\")\n    const [password, setpassword] = useState(\"\")\n    const [url, setUrl] = useState(\"\")\n    const [name, setName] = useState(\"\")\n\n    const dispatch = useDispatch()\n\n    const handleCreateNew = () => {\n        console.log('creating new user with:', username, password, url, name)\n        if (username === \"\" || password === \"\" || url === \"\" || name === \"\") {\n            console.log('fill all fields')\n        } else {\n            const newUser = {\n                username: username,\n                url: url,\n                password: password,\n                name: name\n            }\n            dispatch(createNewUser(newUser))\n        }\n        \n    }\n\n    return (\n        <div className=\"login-form\">\n\n            <form onSubmit={handleCreateNew}>\n                username <input type='text' value={username} placeholder={'username'} onChange={event => setUsername(event.target.value)} />\n                <br />\n                password <input type='password' value={password} placeholder={'password'} onChange={event => setpassword(event.target.value)} />\n                <br />\n                url <input type='text' value={url} placeholder={'URL'} onChange={event => setUrl(event.target.value)} />\n                <br />\n                name <input type='text' value={name} placeholder={'name'} onChange={event => setName(event.target.value)} />\n                <br />\n                <button type='submit'>Create new user</button>   <Link to=\"/\">login</Link>\n            </form>\n\n\n        </div>\n    )\n}\n\nexport default UserCreationPage;","/Users/AM/pet_project/src/Store.js",[],"/Users/AM/pet_project/src/reducers/usersReducer.js",[],"/Users/AM/pet_project/src/services/userService.js",["125","126"],"import axios from 'axios'\n// const baseUrl = '/users'\nconst baseUrl = 'http://localhost:3005/api/users'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n  \n}\nconst removeToken = () => {\n  token = null\n  \n}\nconst getById = async (id) => {\n  const response = await axios.get(`${baseUrl}/${id}`)\n  return response.data\n}\n\nconst getAll = async () => {\n  const response = await axios.get(`${baseUrl}`)\n  return response.data\n}\n\nconst createNew = async (newObject) => {\n  const response = await axios.post(baseUrl, newObject)\n  return response.data\n}\n\nconst update = async (id, newObject) => {\n  const res = await axios.put(`${baseUrl}/${id}`, newObject)\n  return res.data\n}\n\nexport default { getAll, getById, createNew, setToken, removeToken, update }","/Users/AM/pet_project/src/reducers/loginReducer.js",[],"/Users/AM/pet_project/src/services/loginService.js",["127"],"import axios from 'axios'\nconst baseUrl = 'http://localhost:3005/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  console.log('response was:', response)\n  return response.data\n}\n\nexport default { login }","/Users/AM/pet_project/src/components/HomeView.js",["128","129","130","131","132","133","134"],"import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { logout } from '../reducers/loginReducer'\nimport Togglable from './Togglable'\nimport UsersList from './UsersList'\nimport PostPage from './PostPage'\nimport PostForm from './PostForm'\nimport styles from '../styles.css'\nimport TopBar from './TopBar'\n\nimport SideBarNavigation from './SideBarNavigation'\n\n// import {\n//     useHistory\n// } from 'react-router-dom'\n\nimport {\n    Switch, Route, Link, useHistory,\n} from \"react-router-dom\"\n\nconst HomeView = () => {\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const login = useSelector(state => state.login)\n    if (!login) {\n        return null\n    }\n\n    const handleLogout = () => {\n        dispatch(logout())\n        history.push('/')\n    }\n\n    return (\n\n\n        <div >\n            <div className=\"container\">\n                <TopBar />\n                <hr />\n                <div className=\"row\">\n                    <div className=\"col-sm-2\">\n                        <SideBarNavigation />\n                    </div>\n                    <div className=\"col-sm-7\">\n                        <PostPage />\n                    </div>\n                    <div className=\"col-sm-3\">\n                        <PostForm />\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default HomeView;","/Users/AM/pet_project/src/components/Togglable.js",[],"/Users/AM/pet_project/src/components/UsersList.js",["135","136","137","138","139","140","141","142","143","144","145","146","147"],"import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport userService from '../services/userService'\nimport { updateUser } from '../reducers/usersReducer'\nimport Togglable from './Togglable'\n\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport TopBar from './TopBar'\n\nimport SideBarNavigation from './SideBarNavigation'\nimport PostForm from './PostForm'\n\n\nimport {\n    Switch, Route, Link, useHistory,\n} from \"react-router-dom\"\n\nconst UsersList = () => {\n    const users = useSelector(state => state.users)\n    const login = useSelector(state => state.login)\n\n    const currentUser = users.find(u => u.username === login.username)\n\n    const allOtherUsers = users.filter(u => u.username !== login.username)\n\n    const myRequests = allOtherUsers.filter(u => {\n        if (u.received.includes(currentUser.id)) {\n            return u\n        }\n    })\n    const myRecieved = allOtherUsers.filter(u => {\n        if (u.requests.includes(currentUser.id)) {\n            return u\n        }\n    })\n\n    const myFriends = allOtherUsers.filter(u => {\n        if (u.friends.includes(currentUser.id)) {\n            return u\n        }\n    })\n\n\n    const section = {\n        paddingTop: 5,\n        paddingLeft: 2,\n        paddingRight: 2,\n        paddingBottom: 5,\n        border: 'solid',\n        borderWidth: 2,\n        marginBottom: 5\n    }\n\n\n    const neutralUser = allOtherUsers.filter(u => !myRequests.includes(u) && !myRecieved.includes(u) && !myFriends.includes(u))\n\n\n    return (\n        <div className=\"container\">\n            <TopBar />\n            <hr />\n            <div className=\"row\">\n                <div className=\"col-sm-2\">\n                    <SideBarNavigation />\n                    {/* <UsersList /> */}\n                </div>\n                <div className=\"col-sm-7\">\n                    <h4>Contacts</h4>\n                    <Accordion defaultActiveKey=\"0\">\n\n                        <Card>\n                            <Card.Header>\n                                <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"1\" >\n                                    Friends\n                                </Accordion.Toggle>\n                            </Card.Header>\n                            <Accordion.Collapse eventKey=\"1\">\n                                <Card.Body><Friends login={login} users={users} allOtherUsers={allOtherUsers} myRecieved={myRecieved} /></Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n\n                        {/* <Card>\n                            <Card.Header>\n                                <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"2\" >\n                                    Other users\n                    </Accordion.Toggle>\n                            </Card.Header>\n                            <Accordion.Collapse eventKey=\"2\">\n                                <Card.Body>{neutralUser.map(user => <UserLine key={user.id} user={user} users={users} login={login} status={'stranger'} />)} </Card.Body>\n                            </Accordion.Collapse>\n                        </Card> */}\n\n                        <Card>\n                            <Card.Header>\n                                <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"3\" >\n                                    My requests\n                    </Accordion.Toggle>\n                            </Card.Header>\n                            <Accordion.Collapse eventKey=\"3\">\n                                <Card.Body>{myRequests.map(user => <UserLine key={user.id} user={user} users={users} login={login} status={'request'} />)}</Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n\n                        {/* <Card>\n                            <Card.Header>\n                                <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"4\" >\n                                    <p>My Recieved</p>\n                                </Accordion.Toggle>\n                            </Card.Header>\n                            <Accordion.Collapse eventKey=\"4\">\n                                <Card.Body> {myRecieved.map(user => <UserLine key={user.id} user={user} users={users} login={login} status={'received'} />)}</Card.Body>\n                            </Accordion.Collapse>\n                        </Card> */}\n\n\n                    </Accordion>\n                </div>\n                <div className=\"col-sm-3\">\n                    <h4>Other users</h4>\n\n                    {neutralUser.map(user => <UserLine key={user.id} user={user} users={users} login={login} status={'stranger'} />)}\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nconst Friends = ({ login, users, allOtherUsers, myRecieved }) => {\n    const currentUser = users.find(u => u.username === login.username)\n    if (!currentUser) {\n        return null\n    }\n    const friends = allOtherUsers.filter(u => {\n        if (u.friends.includes(currentUser.id)) {\n            return u\n        }\n    })\n    if (myRecieved.length === 0) {\n        return (\n            <div>\n                <h5>My friends</h5>\n                <hr />\n                {friends.map(user => <UserLine key={user.id} user={user} users={users} login={login} status={'friend'} />)}\n            </div>\n        )\n\n    }\n    return (\n        <div>\n            <h5>Friend request</h5>\n            <hr />\n            {myRecieved.map(user => <UserLine key={user.id} user={user} users={users} login={login} status={'received'} />)}\n            <h5>My friends</h5>\n            <hr />\n            {friends.map(user => <UserLine key={user.id} user={user} users={users} login={login} status={'friend'} />)}\n        </div>\n    )\n\n}\n\nconst UserLine = ({ user, users, login, status }) => {\n    const dispatch = useDispatch()\n\n    const handleSendRequest = (id) => {\n        const currentUser = users.find(u => u.username === login.username)\n        const currentUserUpdated = { ...currentUser, requests: currentUser.requests.concat(id) }\n\n        const requestedFriend = users.find(u => u.username === user.username)\n        const requestedFriendUpdated = { ...requestedFriend, received: requestedFriend.received.concat(currentUser.id) }\n\n        dispatch(updateUser(currentUserUpdated))\n        dispatch(updateUser(requestedFriendUpdated))\n    }\n\n    const handleRemoveRequest = (id) => {\n        console.log('I changed my mind')\n        const currentUser = users.find(u => u.username === login.username)\n        const updatedRequests = currentUser.requests.filter(idInList => idInList !== id)\n        const updatedCurrentUser = { ...currentUser, requests: updatedRequests }\n\n        const secondUser = users.find(u => u.username === user.username)\n        const updatedReceived = secondUser.received.filter(idInList => idInList !== currentUser.id)\n        const updatedsecondUser = { ...secondUser, received: updatedReceived }\n\n        dispatch(updateUser(updatedCurrentUser))\n        dispatch(updateUser(updatedsecondUser))\n    }\n    const handleAccept = (id) => {\n        console.log('I want to be a friend with you!!!')\n        const currentUser = users.find(u => u.username === login.username)\n        const updatedReceived = currentUser.received.filter(idInList => idInList !== id)\n        const updatedFriends = currentUser.friends.concat(id)\n        const updatedCurrentUser = {\n            ...currentUser,\n            received: updatedReceived,\n            friends: updatedFriends\n        }\n\n        const secondUser = users.find(u => u.username === user.username)\n        const updatedRequests = secondUser.requests.filter(idInList => idInList !== currentUser.id)\n        const updatedSecondUser = {\n            ...secondUser,\n            requests: updatedRequests,\n            friends: secondUser.friends.concat(currentUser.id)\n        }\n\n        dispatch(updateUser(updatedCurrentUser))\n        dispatch(updateUser(updatedSecondUser))\n\n    }\n    const handleDecline = (id) => {\n        const currentUser = users.find(u => u.username === login.username)\n        const updatedReceived = currentUser.received.filter(idInList => idInList !== id)\n        const updatedCurrentUser = { ...currentUser, received: updatedReceived }\n\n        const secondUser = users.find(u => u.username === user.username)\n        const updatedRequests = secondUser.requests.filter(idInList => idInList !== currentUser.id)\n        const updatedSecondUser = { ...secondUser, requests: updatedRequests }\n\n        dispatch(updateUser(updatedCurrentUser))\n        dispatch(updateUser(updatedSecondUser))\n    }\n    const removeFriend = (id) => {\n        const currentUser = users.find(u => u.username === login.username)\n        const updatedRFriends = currentUser.friends.filter(idInList => idInList !== id)\n        const updatedCurrentUser = { ...currentUser, friends: updatedRFriends }\n\n        const secondUser = users.find(u => u.username === user.username)\n        const secondUpdatedFriends = secondUser.friends.filter(idInList => idInList !== currentUser.id)\n        const updatedSecondUser = { ...secondUser, friends: secondUpdatedFriends }\n\n        dispatch(updateUser(updatedCurrentUser))\n        dispatch(updateUser(updatedSecondUser))\n    }\n\n    if (status === 'request') {\n        return (\n            <div>\n                <Link to={`/user/${user.url}`}>{ user.name }</Link>   <button onClick={() => handleRemoveRequest(user.id)}>Remove request</button>\n                <hr />\n            </div>\n        )\n\n    } else if (status === 'received') {\n        return (\n            <div>\n                <Link to={`/user/${user.url}`}>{ user.name }</Link> <br />\n                <button onClick={() => handleAccept(user.id)}>Accept</button>  <button onClick={() => handleDecline(user.id)}>Decline</button>\n                <hr />\n            </div>\n        )\n\n    } else if (status === 'friend') {\n        return (\n            <div>\n                <Link to={`/user/${user.url}`}>{ user.name }</Link> <button onClick={() => removeFriend(user.id)}>Remove friend</button>\n                <hr />\n            </div>\n        )\n\n    }\n    return (\n        <div>\n            <Link to={`/user/${user.url}`}>{ user.name }</Link>   <button onClick={() => handleSendRequest(user.id)}>Make a friend</button>\n            <hr />\n        </div>\n    )\n\n}\n\nexport default UsersList;\n\n\n\n","/Users/AM/pet_project/src/components/PostPage.js",["148","149","150","151","152","153","154","155","156"],"import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { logout } from '../reducers/loginReducer'\nimport { removePost } from '../reducers/postsReducer'\nimport { updateUser } from '../reducers/usersReducer'\nimport UsersList from './UsersList'\nimport Togglable from './Togglable'\n\nimport CommentForm from \"./CommentForm\"\nimport CommentsList from \"./CommentsList\"\n\n\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\n\nimport {\n    Switch, Route, Link, useHistory,\n} from \"react-router-dom\"\n\n\nconst PostPage = () => {\n    const login = useSelector(state => state.login)\n    const allPosts = useSelector(state => state.posts)\n    const users = useSelector(state => state.users)\n    const currentUser = users.find(u => u.username === login.username)\n    if (!currentUser) {\n        return null\n    }\n\n    const friends = users.filter(u => {\n        if (u.friends.includes(currentUser.id)) {\n            return u\n        }\n    })\n    const friendsId = friends.map(f => f.id)\n    const postIds = friendsId.concat(currentUser.id)\n    const postsByFriends = allPosts.filter(p => {\n        if (postIds.includes(p.user)) {\n            return p\n        }\n    })\n\n    return (\n        <div >\n            <h4>Posts</h4>\n            <Accordion defaultActiveKey=\"0\">\n                {postsByFriends.map(post => <PostLine key={post.id} post={post} currentUser={currentUser} />)}\n            </Accordion>\n        </div>\n    )\n}\n\nconst PostLine = ({ post, currentUser }) => {\n    const dispatch = useDispatch()\n    const users = useSelector(state => state.users)\n    const handleDeletePost = () => {\n\n        const postsWithoutPostId = currentUser.posts.filter(idd => idd !== post.id)\n        const userUpdated = { ...currentUser, posts: postsWithoutPostId }\n\n\n        dispatch(removePost(post.id))\n        dispatch(updateUser(userUpdated))\n    }\n    if (post.user === currentUser.id) {\n        return (\n            <div>\n                <Card >\n                    <Card.Header>\n                        <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey={post.id} >\n                            {post.content} <button className=\"right\" onClick={() => handleDeletePost()}>delete</button>\n                        </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey={post.id}>\n                        <Card.Body>\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <CommentForm postId={post.id} user={currentUser} />\n                                </div>\n                                <div className=\"col\">\n                                    <CommentsList postId={post.id} />\n                                </div>\n\n                            </div>\n                            {/* <CommentForm postId={post.id} user={currentUser} />\n                            <CommentsList postId={post.id} /> */}\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n            </div>\n        )\n    }\n    const postCreator = users.find(u => u.id === post.user)\n    return (\n        <div>\n            <Card>\n\n                <Card.Header>\n\n                    <Accordion.Toggle as={Card.Body} variant=\"link\" eventKey={post.id}>\n                        {post.content} <p className=\"by\">by<Link className=\"by\" to={`/user/${postCreator.url}`}>&nbsp;{ postCreator.name}</Link></p> \n                        \n                         {/* <p className=\"by\">by {postCreator.name}</p> */}\n                    </Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey={post.id}>\n                    <Card.Body>\n\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <CommentForm postId={post.id} user={currentUser} />\n                            </div>\n                            <div className=\"col\">\n                                <CommentsList postId={post.id} />\n                            </div>\n\n                        </div>\n\n                        {/* <CommentForm postId={post.id} user={currentUser} />\n                        <CommentsList postId={post.id} /> */}\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </div>\n    )\n}\n\nexport default PostPage;","/Users/AM/pet_project/src/components/PostForm.js",["157","158","159"],"import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { logout } from '../reducers/loginReducer'\nimport { createNewPost } from '../reducers/postsReducer'\nimport UsersList from './UsersList'\nimport PostPage from './PostPage'\n\n\nconst PostForm = () => {\n    const [contentt, setContentt] = useState(\"\")\n    const dispatch = useDispatch()\n\n    const login = useSelector(state => state.login)\n    if (!login) {\n        return null\n    }\n    const handleAddPost = () => {\n        const newPost = {\n            content: contentt,\n            likes: 0\n        }\n        setContentt('')\n        dispatch(createNewPost(newPost))\n    }\n\n    return (\n        <div >\n            <h4>Create new post</h4>\n            <form onSubmit={handleAddPost}>\n                <textarea className=\"post\" value={contentt} placeholder={'Write a new post'} onChange={event => setContentt(event.target.value)}></textarea>\n                <br />\n                <button type='submit'>Create new post</button>\n\n            </form>\n\n        </div>\n    )\n}\n\nexport default PostForm;","/Users/AM/pet_project/src/reducers/postsReducer.js",["160","161","162"],"\nimport postService from '../services/postService'\nimport { useDispatch } from 'react-redux'\nimport { updateUser } from '../reducers/usersReducer'\n\nconst reducer = (state = [], action) => {\n    switch (action.type) {\n        case ('CREATE_NEW_POST'):\n            return state.concat(action.data)\n        case ('INIT_POSTS'):\n            return action.data\n        case ('REMOVE_POST'):\n            const newState = state.filter(p => p.id !== action.data)\n            return newState\n        default:\n    }\n    return state\n}\n\nexport const initializePosts = () => {\n    return async dispatch => {\n        const postsFromServer = await postService.getAll()\n        dispatch({\n            type: 'INIT_POSTS',\n            data: postsFromServer,\n        })\n    }\n}\n\nexport const createNewPost = obj => {\n    return async dispatch => {\n        const createdPOST = await postService.createNew(obj)\n        dispatch({\n            type: 'CREATE_NEW_POST',\n            data: createdPOST,\n        })\n    }\n}\n\nexport const removePost = ( postId ) => {\n    return async dispatch => {\n        const res = await postService.remove(postId)\n        dispatch({\n            type: 'REMOVE_POST',\n            data: postId\n        })\n    }\n}\n\nexport default reducer","/Users/AM/pet_project/src/services/postService.js",["163"],"import axios from 'axios'\n// const baseUrl = '/users'\nconst baseUrl = 'http://localhost:3005/api/posts'\n\nlet token = null\n\nconst setToken = newToken => {\n    token = `bearer ${newToken}`\n\n}\nconst removeToken = () => {\n    token = null\n\n}\nconst getById = async (id) => {\n    const response = await axios.get(`${baseUrl}/${id}`)\n    return response.data\n}\n\nconst getAll = async () => {\n    const response = await axios.get(`${baseUrl}`)\n    return response.data\n}\n\nconst remove = async (id) => {\n    // console.log('remove is active and id in it is:', id)\n    const response = await axios.delete(`${baseUrl}/${id}`)\n    return response\n  }\n\nconst createNew = async (newObject) => {\n    const config = {\n        headers: { Authorization: token },\n    }\n    const response = await axios.post(baseUrl, newObject, config)\n    return response.data\n}\n\nconst update = async (id, newObject) => {\n    const res = await axios.put(`${baseUrl}/${id}`, newObject)\n    return res.data\n}\n\nexport default { getAll, getById, createNew, setToken, removeToken, update, remove }","/Users/AM/pet_project/src/components/CommentForm.js",["164","165","166"],"import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { logout } from '../reducers/loginReducer'\nimport UsersList from './UsersList'\nimport { createNewComment } from '../reducers/commentsReducer'\n\n\nconst CommentForm = ({ postId, user }) => {\n    const dispatch = useDispatch()\n    const [value, setValue] = useState(\"\")\n    const allComments = useSelector(state => state.comments)\n    \n\n    const handleCreateNewComment = (id) => {\n        const newComment = {\n            content: value,\n            postId: postId,\n            user: user.id \n        }\n        setValue('')    \n        dispatch(createNewComment(newComment))\n    }\n\n    return (\n        <div >\n            <h5>Comment</h5>\n            <form onSubmit={() => handleCreateNewComment(postId)}>\n                <textarea className=\"comment\" value={value} placeholder={'Write a comment'} onChange={event => setValue(event.target.value)}></textarea>\n                <br />\n                <button type='submit'>Comment</button>\n            </form>\n\n\n\n        </div>\n    )\n}\n\nexport default CommentForm;","/Users/AM/pet_project/src/reducers/commentsReducer.js",["167","168","169","170"],"\nimport postService from '../services/postService'\nimport commentService from '../services/commentService'\nimport { useDispatch } from 'react-redux'\nimport { updateUser } from '../reducers/usersReducer'\n\nconst reducer = (state = [], action) => {\n    switch (action.type) {\n        case ('CREATE_NEW_COMMENT'):\n            return state.concat(action.data)\n        case ('INIT_COMMENTS'):\n            return action.data\n        case ('REMOVE_COMMENT'):\n            const newState = state.filter(p => p.id !== action.data)\n            return newState\n        default:\n    }\n    return state\n}\n\nexport const initializeComments = () => {\n    return async dispatch => {\n        const commentsFromServer = await commentService.getAll()\n        dispatch({\n            type: 'INIT_COMMENTS',\n            data: commentsFromServer,\n        })\n    }\n}\n\nexport const createNewComment = obj => {\n    return async dispatch => {\n        const createdComment = await commentService.createNew(obj)\n        dispatch({\n            type: 'CREATE_NEW_COMMENT',\n            data: createdComment,\n        })\n    }\n}\n\nexport const removeComment = ( commentId ) => {\n    return async dispatch => {\n        const res = await commentService.remove(commentId)\n        dispatch({\n            type: 'REMOVE_COMMENT',\n            data: commentId\n        })\n    }\n}\n\nexport default reducer","/Users/AM/pet_project/src/services/commentService.js",["171"],"import axios from 'axios'\nconst baseUrl = 'http://localhost:3005/api/comments'\n\nlet token = null\n\nconst setToken = newToken => {\n    token = `bearer ${newToken}`\n\n}\nconst removeToken = () => {\n    token = null\n\n}\nconst getById = async (id) => {\n    const response = await axios.get(`${baseUrl}/${id}`)\n    return response.data\n}\n\nconst getAll = async () => {\n    const response = await axios.get(`${baseUrl}`)\n    return response.data\n}\n\nconst remove = async (id) => {\n    const response = await axios.delete(`${baseUrl}/${id}`)\n    return response\n}\n\nconst createNew = async (newObject) => {\n    console.log('token is:', token)\n    console.log('newObject (comment) is:', newObject)\n    const config = {\n        headers: { Authorization: token },\n    }\n    const response = await axios.post(baseUrl, newObject, config)\n    return response.data\n}\n\nconst update = async (id, newObject) => {\n    const res = await axios.put(`${baseUrl}/${id}`, newObject)\n    return res.data\n}\n\nexport default { getAll, getById, createNew, setToken, removeToken, update, remove }","/Users/AM/pet_project/src/components/CommentsList.js",["172","173","174","175","176","177","178","179"],"import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { logout } from '../reducers/loginReducer'\nimport UsersList from './UsersList'\nimport { createNewComment } from '../reducers/commentsReducer'\n\nimport {\n    Switch, Route, Link, useHistory,\n} from \"react-router-dom\"\n\n\nconst CommentList = ({ postId }) => {\n    const allComments = useSelector(state => state.comments)\n    const commentsToPost = allComments.filter(c => c.post === postId)\n    return (\n        <div>\n            <h5>Recent comments</h5>\n            <div className=\"comments-list\">\n                {commentsToPost.map(c => <CommentLine key={c.id} comment={c} />)}\n            </div>\n        </div>\n    )\n}\n\nconst CommentLine = ({ comment }) => {\n    const users = useSelector(state => state.users)\n    const creator = users.find(u => u.id === comment.user)\n    return (\n        <div>\n            {/* <span> {comment.content} <p className=\"by\">by {creator.name}</p></span> */}\n            <span> {comment.content} <p className=\"by\">by<Link className=\"by\" to={`/user/${creator.url}`}>&nbsp;{ creator.name}</Link></p> </span>\n            \n            <hr />\n        </div>\n    )\n\n}\n\nexport default CommentList;","/Users/AM/pet_project/src/components/SideBarNavigation.js",["180"],"import React from 'react'\n\nconst SideBarNavigation = () => {\n    return (\n        <div >\n            <div className=\"sidenav\">\n                <a href=\"/home\">Posts</a> <br /> \n                <a href=\"/connections\">Connections</a>  <br /> \n                <a href=\"/personal\">Personal</a> <br /> \n                <a href=\"#\">Settings</a>   \n            </div>\n        </div>\n    )\n}\n\nexport default SideBarNavigation;","/Users/AM/pet_project/src/components/TopBar.js",["181","182","183"],"import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { logout } from '../reducers/loginReducer'\n\nimport {\n    Switch, Route, Link, useHistory,\n} from \"react-router-dom\"\n\nconst TopBar = () => {\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const login = useSelector(state => state.login)\n    if (!login) {\n        return null\n    }\n\n    const handleLogout = () => {\n        dispatch(logout())\n        history.push('/')\n    }\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-sm-2\">\n                <h2>Welcome</h2>\n            </div>\n            <div className=\"col-sm-8\">\n                <p>Logged in as {login.name}</p>\n            </div>\n            <div className=\"col-sm-2\">\n                <button onClick={handleLogout}>logout</button>\n            </div>\n\n        </div>\n    )\n}\n\nexport default TopBar;","/Users/AM/pet_project/src/components/PersonalPage.js",["184","185"],"/Users/AM/pet_project/src/components/UserPage.js",["186","187","188"],"/Users/AM/pet_project/src/components/SkillForm.js",["189","190","191","192","193"],{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","severity":1,"message":"199","line":22,"column":18,"nodeType":"200","messageId":"201","endLine":22,"endColumn":22},{"ruleId":"198","severity":1,"message":"202","line":37,"column":9,"nodeType":"200","messageId":"201","endLine":37,"endColumn":14},{"ruleId":"198","severity":1,"message":"203","line":6,"column":5,"nodeType":"200","messageId":"201","endLine":6,"endColumn":11},{"ruleId":"198","severity":1,"message":"204","line":6,"column":13,"nodeType":"200","messageId":"201","endLine":6,"endColumn":18},{"ruleId":"198","severity":1,"message":"205","line":6,"column":26,"nodeType":"200","messageId":"201","endLine":6,"endColumn":36},{"ruleId":"198","severity":1,"message":"206","line":12,"column":3,"nodeType":"200","messageId":"201","endLine":12,"endColumn":8},{"ruleId":"207","severity":1,"message":"208","line":35,"column":1,"nodeType":"209","endLine":35,"endColumn":77},{"ruleId":"207","severity":1,"message":"208","line":10,"column":1,"nodeType":"209","endLine":10,"endColumn":25},{"ruleId":"198","severity":1,"message":"210","line":4,"column":8,"nodeType":"200","messageId":"201","endLine":4,"endColumn":17},{"ruleId":"198","severity":1,"message":"211","line":5,"column":8,"nodeType":"200","messageId":"201","endLine":5,"endColumn":17},{"ruleId":"198","severity":1,"message":"212","line":8,"column":8,"nodeType":"200","messageId":"201","endLine":8,"endColumn":14},{"ruleId":"198","severity":1,"message":"203","line":18,"column":5,"nodeType":"200","messageId":"201","endLine":18,"endColumn":11},{"ruleId":"198","severity":1,"message":"204","line":18,"column":13,"nodeType":"200","messageId":"201","endLine":18,"endColumn":18},{"ruleId":"198","severity":1,"message":"199","line":18,"column":20,"nodeType":"200","messageId":"201","endLine":18,"endColumn":24},{"ruleId":"198","severity":1,"message":"213","line":30,"column":11,"nodeType":"200","messageId":"201","endLine":30,"endColumn":23},{"ruleId":"198","severity":1,"message":"214","line":1,"column":17,"nodeType":"200","messageId":"201","endLine":1,"endColumn":25},{"ruleId":"198","severity":1,"message":"215","line":3,"column":8,"nodeType":"200","messageId":"201","endLine":3,"endColumn":19},{"ruleId":"198","severity":1,"message":"210","line":5,"column":8,"nodeType":"200","messageId":"201","endLine":5,"endColumn":17},{"ruleId":"198","severity":1,"message":"216","line":9,"column":8,"nodeType":"200","messageId":"201","endLine":9,"endColumn":14},{"ruleId":"198","severity":1,"message":"217","line":13,"column":8,"nodeType":"200","messageId":"201","endLine":13,"endColumn":16},{"ruleId":"198","severity":1,"message":"203","line":17,"column":5,"nodeType":"200","messageId":"201","endLine":17,"endColumn":11},{"ruleId":"198","severity":1,"message":"204","line":17,"column":13,"nodeType":"200","messageId":"201","endLine":17,"endColumn":18},{"ruleId":"198","severity":1,"message":"205","line":17,"column":26,"nodeType":"200","messageId":"201","endLine":17,"endColumn":36},{"ruleId":"218","severity":1,"message":"219","line":28,"column":47,"nodeType":"220","messageId":"221","endLine":28,"endColumn":49},{"ruleId":"218","severity":1,"message":"219","line":33,"column":47,"nodeType":"220","messageId":"221","endLine":33,"endColumn":49},{"ruleId":"218","severity":1,"message":"219","line":39,"column":46,"nodeType":"220","messageId":"221","endLine":39,"endColumn":48},{"ruleId":"198","severity":1,"message":"222","line":46,"column":11,"nodeType":"200","messageId":"201","endLine":46,"endColumn":18},{"ruleId":"218","severity":1,"message":"219","line":136,"column":44,"nodeType":"220","messageId":"221","endLine":136,"endColumn":46},{"ruleId":"198","severity":1,"message":"223","line":3,"column":10,"nodeType":"200","messageId":"201","endLine":3,"endColumn":16},{"ruleId":"198","severity":1,"message":"211","line":6,"column":8,"nodeType":"200","messageId":"201","endLine":6,"endColumn":17},{"ruleId":"198","severity":1,"message":"210","line":7,"column":8,"nodeType":"200","messageId":"201","endLine":7,"endColumn":17},{"ruleId":"198","severity":1,"message":"216","line":15,"column":8,"nodeType":"200","messageId":"201","endLine":15,"endColumn":14},{"ruleId":"198","severity":1,"message":"203","line":18,"column":5,"nodeType":"200","messageId":"201","endLine":18,"endColumn":11},{"ruleId":"198","severity":1,"message":"204","line":18,"column":13,"nodeType":"200","messageId":"201","endLine":18,"endColumn":18},{"ruleId":"198","severity":1,"message":"205","line":18,"column":26,"nodeType":"200","messageId":"201","endLine":18,"endColumn":36},{"ruleId":"218","severity":1,"message":"219","line":31,"column":36,"nodeType":"220","messageId":"221","endLine":31,"endColumn":38},{"ruleId":"218","severity":1,"message":"219","line":38,"column":46,"nodeType":"220","messageId":"221","endLine":38,"endColumn":48},{"ruleId":"198","severity":1,"message":"223","line":3,"column":10,"nodeType":"200","messageId":"201","endLine":3,"endColumn":16},{"ruleId":"198","severity":1,"message":"211","line":5,"column":8,"nodeType":"200","messageId":"201","endLine":5,"endColumn":17},{"ruleId":"198","severity":1,"message":"224","line":6,"column":8,"nodeType":"200","messageId":"201","endLine":6,"endColumn":16},{"ruleId":"198","severity":1,"message":"225","line":3,"column":10,"nodeType":"200","messageId":"201","endLine":3,"endColumn":21},{"ruleId":"198","severity":1,"message":"226","line":4,"column":10,"nodeType":"200","messageId":"201","endLine":4,"endColumn":20},{"ruleId":"198","severity":1,"message":"227","line":42,"column":15,"nodeType":"200","messageId":"201","endLine":42,"endColumn":18},{"ruleId":"207","severity":1,"message":"208","line":44,"column":1,"nodeType":"209","endLine":44,"endColumn":85},{"ruleId":"198","severity":1,"message":"223","line":3,"column":10,"nodeType":"200","messageId":"201","endLine":3,"endColumn":16},{"ruleId":"198","severity":1,"message":"211","line":4,"column":8,"nodeType":"200","messageId":"201","endLine":4,"endColumn":17},{"ruleId":"198","severity":1,"message":"228","line":11,"column":11,"nodeType":"200","messageId":"201","endLine":11,"endColumn":22},{"ruleId":"198","severity":1,"message":"229","line":2,"column":8,"nodeType":"200","messageId":"201","endLine":2,"endColumn":19},{"ruleId":"198","severity":1,"message":"225","line":4,"column":10,"nodeType":"200","messageId":"201","endLine":4,"endColumn":21},{"ruleId":"198","severity":1,"message":"226","line":5,"column":10,"nodeType":"200","messageId":"201","endLine":5,"endColumn":20},{"ruleId":"198","severity":1,"message":"227","line":43,"column":15,"nodeType":"200","messageId":"201","endLine":43,"endColumn":18},{"ruleId":"207","severity":1,"message":"208","line":44,"column":1,"nodeType":"209","endLine":44,"endColumn":85},{"ruleId":"198","severity":1,"message":"214","line":1,"column":17,"nodeType":"200","messageId":"201","endLine":1,"endColumn":25},{"ruleId":"198","severity":1,"message":"225","line":2,"column":23,"nodeType":"200","messageId":"201","endLine":2,"endColumn":34},{"ruleId":"198","severity":1,"message":"223","line":3,"column":10,"nodeType":"200","messageId":"201","endLine":3,"endColumn":16},{"ruleId":"198","severity":1,"message":"211","line":4,"column":8,"nodeType":"200","messageId":"201","endLine":4,"endColumn":17},{"ruleId":"198","severity":1,"message":"230","line":5,"column":10,"nodeType":"200","messageId":"201","endLine":5,"endColumn":26},{"ruleId":"198","severity":1,"message":"203","line":8,"column":5,"nodeType":"200","messageId":"201","endLine":8,"endColumn":11},{"ruleId":"198","severity":1,"message":"204","line":8,"column":13,"nodeType":"200","messageId":"201","endLine":8,"endColumn":18},{"ruleId":"198","severity":1,"message":"205","line":8,"column":26,"nodeType":"200","messageId":"201","endLine":8,"endColumn":36},{"ruleId":"231","severity":1,"message":"232","line":10,"column":17,"nodeType":"233","endLine":10,"endColumn":29},{"ruleId":"198","severity":1,"message":"203","line":6,"column":5,"nodeType":"200","messageId":"201","endLine":6,"endColumn":11},{"ruleId":"198","severity":1,"message":"204","line":6,"column":13,"nodeType":"200","messageId":"201","endLine":6,"endColumn":18},{"ruleId":"198","severity":1,"message":"199","line":6,"column":20,"nodeType":"200","messageId":"201","endLine":6,"endColumn":24},{"ruleId":"198","severity":1,"message":"214","line":1,"column":17,"nodeType":"200","messageId":"201","endLine":1,"endColumn":25},{"ruleId":"198","severity":1,"message":"225","line":2,"column":23,"nodeType":"200","messageId":"201","endLine":2,"endColumn":34},{"ruleId":"198","severity":1,"message":"214","line":1,"column":17,"nodeType":"200","messageId":"201","endLine":1,"endColumn":25},{"ruleId":"198","severity":1,"message":"225","line":2,"column":23,"nodeType":"200","messageId":"201","endLine":2,"endColumn":34},{"ruleId":"198","severity":1,"message":"234","line":12,"column":11,"nodeType":"200","messageId":"201","endLine":12,"endColumn":16},{"ruleId":"198","severity":1,"message":"223","line":3,"column":10,"nodeType":"200","messageId":"201","endLine":3,"endColumn":16},{"ruleId":"198","severity":1,"message":"235","line":4,"column":10,"nodeType":"200","messageId":"201","endLine":4,"endColumn":23},{"ruleId":"198","severity":1,"message":"211","line":5,"column":8,"nodeType":"200","messageId":"201","endLine":5,"endColumn":17},{"ruleId":"198","severity":1,"message":"224","line":6,"column":8,"nodeType":"200","messageId":"201","endLine":6,"endColumn":16},{"ruleId":"198","severity":1,"message":"236","line":11,"column":11,"nodeType":"200","messageId":"201","endLine":11,"endColumn":19},"no-native-reassign",["237"],"no-negated-in-lhs",["238"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'users' is assigned a value but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'useHistory' is defined but never used.","'token' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Togglable' is defined but never used.","'UsersList' is defined but never used.","'styles' is defined but never used.","'handleLogout' is assigned a value but never used.","'useState' is defined but never used.","'userService' is defined but never used.","'Button' is defined but never used.","'PostForm' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'section' is assigned a value but never used.","'logout' is defined but never used.","'PostPage' is defined but never used.","'useDispatch' is defined but never used.","'updateUser' is defined but never used.","'res' is assigned a value but never used.","'allComments' is assigned a value but never used.","'postService' is defined but never used.","'createNewComment' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'login' is assigned a value but never used.","'createNewPost' is defined but never used.","'dispatch' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]